name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  frontend:
    name: Frontend lint, test, build, coverage
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm ci
      - run: npm audit --audit-level=moderate
      - run: npm run lint
      - run: npx vitest run
      - run: npm run build
      - run: npm run test:coverage
      - name: Upload frontend coverage
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: ./frontend/coverage
      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  backend:
    name: Backend lint, test, coverage
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm ci
      - run: npm audit --audit-level=moderate
      - run: npm run lint
      - run: npm test
      - run: npm run test:coverage
      - name: Upload backend coverage
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: ./backend/coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  docker:
    name: Docker build (frontend & backend)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build backend image
        run: docker build -f Dockerfile.backend .
      - name: Build frontend image
        run: docker build -f Dockerfile.frontend .

  docker-stack:
    name: Docker Compose stack test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and start stack
        run: |
          docker compose -f docker-compose.yml up -d --build
      - name: Wait for backend healthcheck
        run: |
          for i in {1..20}; do
            sleep 5
            if curl -sf http://localhost:3001/api/health/health; then
              echo "Backend healthy" && exit 0
            fi
          done
          echo "Backend healthcheck failed" && docker compose logs backend && exit 1
      - name: Wait for frontend healthcheck
        run: |
          for i in {1..20}; do
            sleep 5
            if curl -sf http://localhost:8080; then
              echo "Frontend healthy" && exit 0
            fi
          done
          echo "Frontend healthcheck failed" && docker compose logs frontend && exit 1
      - name: Integrační test backendu
        run: |
          for i in {1..10}; do
            sleep 3
            if curl -sf http://localhost:3001/api/health/health | grep '"status":"ok"'; then
              echo "Backend API OK" && exit 0
            fi
          done
          echo "Backend API nedostupné nebo špatná odpověď" && exit 1
      - name: Integrační test frontendu
        run: |
          for i in {1..10}; do
            sleep 3
            if curl -sf http://localhost:8080 | grep -i '<!DOCTYPE html>'; then
              echo "Frontend OK" && exit 0
            fi
          done
          echo "Frontend nedostupný nebo špatná odpověď" && exit 1
      - name: Show running containers
        run: docker ps -a
      - name: Show backend logs
        run: docker compose logs backend
      - name: Show frontend logs
        run: docker compose logs frontend
      - name: Stop and clean up
        if: always()
        run: docker compose down -v

  e2e:
    name: E2E testy (Cypress)
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    services:
      mongo:
        image: mongo:6
        ports:
          - 27017:27017
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: |
          cd backend && npm install &
          cd ../frontend && npm install &
          wait
      - name: Start backend
        run: |
          cd backend &
          npm start &
          sleep 10
      - name: Start frontend
        run: |
          cd frontend &
          npm run dev &
          sleep 10
      - name: Run Cypress e2e tests
        run: |
          cd frontend
          npx cypress run
