  ai-accessibility-review:
    name: AI Accessibility Review
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm install
      - name: Install glob
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 7 * * 1'
  workflow_dispatch:
jobs:
  ai-test-coverage-review:
    name: AI Test Coverage Review
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm install
      - name: Run AI test coverage review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: node scripts/ai-test-coverage-review.js
      - name: Upload AI test coverage review
        uses: actions/upload-artifact@v4
        with:
          name: ai-test-coverage-review
          path: ai-test-coverage-review.md
      - name: Slack notification (AI test coverage review)
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "text": "*AI Test Coverage Review* :test_tube:\n$(cat ai-test-coverage-review.md)"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  frontend:
    name: Frontend lint, test, build, coverage
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm ci
      - run: npm audit --audit-level=moderate
      - run: npm run lint
      - run: npx vitest run
      - run: npm run build
      - run: npm run test:coverage
      - name: Upload frontend coverage
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: ./frontend/coverage
      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./frontend/coverage/lcov.info
      - name: Slack notification (AI alert)
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "text": "*AI Alert Report* :rotating_light:\n$(cat ai-alert-report.md)"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
  backend:
    name: Backend lint, test, coverage
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm ci
      - run: npm audit --audit-level=moderate
      - run: npm run lint
      - run: npm test
      - run: npm run test:coverage
      - name: Upload backend coverage
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: ./backend/coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  docker-stack:
    name: Docker Compose stack test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and start stack
        run: |
          docker compose -f docker-compose.yml up -d --build
      - name: Wait for backend healthcheck
        run: |
          for i in {1..20}; do
            sleep 5
            if curl -sf http://localhost:3001/api/health/health; then
              echo "Backend healthy" && exit 0
            fi
          done
          echo "Backend healthcheck failed" && docker compose logs backend && exit 1
      - name: Wait for frontend healthcheck
        run: |
          for i in {1..20}; do
            sleep 5
            if curl -sf http://localhost:8080; then
              echo "Frontend healthy" && exit 0
            fi
          done
          echo "Frontend healthcheck failed" && docker compose logs frontend && exit 1
      - name: Integrační test backendu
        run: |
          for i in {1..10}; do
            sleep 3
            if curl -sf http://localhost:3001/api/health/health | grep '"status":"ok"'; then
              echo "Backend API OK" && exit 0
            fi
          done
          echo "Backend API nedostupné nebo špatná odpověď" && exit 1
      - name: Integrační test frontendu
        run: |
          for i in {1..10}; do
            sleep 3
            if curl -sf http://localhost:8080 | grep -i '<!DOCTYPE html>'; then
              echo "Frontend OK" && exit 0
            fi
          done
          echo "Frontend nedostupný nebo špatná odpověď" && exit 1
      - name: Show running containers
        run: docker ps -a
      - name: Show backend logs
        run: docker compose logs backend
      - name: Show frontend logs
        run: docker compose logs frontend
      - name: Stop and clean up
        if: always()
        run: docker compose down -v

  e2e:
    name: E2E testy (Cypress)
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    services:
      mongo:
        image: mongo:6
        ports:
          - 27017:27017
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: |
          cd backend && npm install &
          cd ../frontend && npm install &
          wait
      - name: Start backend
        run: |
          cd backend &
          npm start &
          sleep 10
      - name: Start frontend
        run: |
          cd frontend &
          npm run dev &
          sleep 10
      - name: Run Cypress e2e tests
        run: |
          cd frontend
          npx cypress run

  copilot-pr-review:
    name: Copilot PR Review
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: github/copilot-review-action@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  ai-changelog:
    name: AI Changelog
    if: github.event_name == 'release' || github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm install
      - name: Generate AI changelog
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: node scripts/generate-changelog-ai.js
      - name: Commit & push changelog
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "AI changelog update [skip ci]" || echo "No changes to commit"
          git push || echo "No push (possibly PR or no changes)"

  ai-usage-report:
    name: AI Usage Report
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Generate AI usage report
        run: node scripts/ai-usage-report.js
      - name: Upload AI usage report
        uses: actions/upload-artifact@v4
        with:
          name: ai-usage-report
          path: ai-usage-report.md

  ai-healthcheck:
    name: AI Healthcheck Backend API
    runs-on: ubuntu-latest
    needs: [backend]
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm install
      - name: Run AI healthcheck
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: node scripts/ai-healthcheck.js
      - name: Upload AI healthcheck report
        uses: actions/upload-artifact@v4
        with:
          name: ai-healthcheck-report
          path: ai-healthcheck-report.md
      - name: Slack notification (AI healthcheck)
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "text": "*AI Healthcheck Report* :stethoscope:\n$(cat ai-healthcheck-report.md)"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  ai-test-coverage-review:
    name: AI Test Coverage Review
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm install
      - name: Run AI test coverage review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: node scripts/ai-test-coverage-review.js
      - name: Upload AI test coverage review
        uses: actions/upload-artifact@v4
        with:
          name: ai-test-coverage-review
          path: ai-test-coverage-review.md
      - name: Slack notification (AI test coverage review)
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "text": "*AI Test Coverage Review* :test_tube:\n$(cat ai-test-coverage-review.md)"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  ai-openapi-docs:
    name: AI OpenAPI Docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm install
      - name: Install OpenAPI validator
        run: npm install -g @apidevtools/swagger-cli
      - name: Generate OpenAPI docs (AI)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: node scripts/generate-openapi-ai.js
      - name: Validate OpenAPI spec
        run: swagger-cli validate backend/openapi.generated.yaml
      - name: Check for OpenAPI changes
        id: diff
        run: |
          if git diff --exit-code backend/openapi.generated.yaml; then
            echo "No OpenAPI changes."
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "OpenAPI spec changed!"
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
      - name: Commit & push OpenAPI docs
        if: steps.diff.outputs.changed == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add backend/openapi.generated.yaml
          git commit -m "AI OpenAPI update [skip ci]" || echo "No changes to commit"
          git push || echo "No push (possibly PR or no changes)"

  ai-refactor-bot:
    name: AI Refactor Bot
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm install
      - name: Run AI refactor bot
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: node scripts/ai-refactor-bot.js
      - name: Upload AI refactor report
        uses: actions/upload-artifact@v4
        with:
          name: ai-refactor-report
          path: ai-refactor-report.md
      - name: Slack notification (AI refactor)
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "text": "*AI Refactor Report* :wrench:\n$(cat ai-refactor-report.md)"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
